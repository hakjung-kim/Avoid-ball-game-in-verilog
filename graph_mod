module graph_mod (clk, rst, x, y, key, key_pulse, rgb);

input clk, rst;
input [9:0] x, y;
input [4:0] key, key_pulse; 
output [2:0] rgb; 

// 화면 원점 
parameter MIN_X = 0;
parameter MIN_Y = 0;


// 화면 크기 설정
parameter MAX_X = 640; // 10비트 
parameter MAX_Y = 480;   // 9비트 

//p 속도, p size
parameter P_X_SIZE = 20; 
parameter P_Y_SIZE = 20; 
parameter P_V = 6; 

//p 속도, p size 
parameter BALL_SIZE = 10; 
parameter BALL_V = 4; //p 속도

wire refr_tick; 
reg en, en2, en3;

wire b1_on, b2_on,b3_on, b4_on, p_on, b5_on, b6_on, b7_on, b8_on, b_on;
wire [9:0] p_y_t, p_y_b, p_x_l, p_x_r; 
reg [9:0] p_y_reg, p_x_reg; 
//reg [9:0] b1_x_reg, b1_y_reg;
//reg [9:0]  b1_vx_reg, b1_vy_reg; 
wire [9:0] b1_x_l, b1_x_r, b1_y_t, b1_y_b, b2_x_l, b2_x_r, b2_y_t, b2_y_b, b3_x_l, b3_x_r, b3_y_t, b3_y_b, b4_x_l, b4_x_r, b4_y_t, b4_y_b;
wire [9:0] b5_x_l, b5_x_r, b5_y_t, b5_y_b, b6_x_l, b6_x_r, b6_y_t, b6_y_b;
wire [9:0] b7_x_l, b7_x_r, b7_y_t, b7_y_b, b8_x_l, b8_x_r, b8_y_t, b8_y_b;
wire [9:0] b_x_l, b_x_r, b_y_t, b_y_b;
//wire reach_top, reach_bottom, reach_left, reach_right;
wire miss_ball, touch_ball, b1_x_touch, b1_y_touch, b2_x_touch, b2_y_touch, b3_x_touch, b3_y_touch, b4_x_touch, b4_y_touch, b5_x_touch, b5_y_touch, b6_x_touch, b6_y_touch ;
wire b7_x_touch, b7_y_touch, b8_x_touch, b8_y_touch, b_x_touch, b_y_touch;
reg game_stop, game_over;  

//refrernce tick 
assign refr_tick = (y==MAX_Y-1 && x==MAX_X-1)? 1 : 0; // 매 프레임마다 한 clk 동안만 1이 됨. 

/*---------------------------------------------------------*/
// player의 위치 결정
/*---------------------------------------------------------*/
assign p_y_t = p_y_reg; //p top
assign p_y_b = p_y_t + P_Y_SIZE - 1; //p bottom
assign p_x_l = p_x_reg; //p left
assign p_x_r = p_x_l + P_X_SIZE - 1; //p right

assign p_on = (x>=p_x_l && x<=p_x_r && y>=p_y_t && y<=p_y_b)? 1 : 0; //p 있는 영역

always @ (posedge clk or posedge rst) begin
    if (rst | game_stop) begin
     p_x_reg <= (MAX_X-P_X_SIZE)/2 + 100; //game이 멈추면 중간에서 시작
     p_y_reg <= (MAX_Y-P_Y_SIZE)/2 + 100; 
  end
    else if (refr_tick) 
        if (key==5'h15 && p_y_t>=P_V) p_y_reg <= p_y_reg - P_V;  //move up
        else if (key==5'h12 && p_y_b<=MAX_Y-1-P_V) p_y_reg <= p_y_reg + P_V; //move down
        else if(key==5'h11 && p_x_r<=MAX_X-1-P_V) p_x_reg <= p_x_reg + P_V; //Move right
        else if (key==5'h13 && p_x_l>=P_V) p_x_reg <= p_x_reg - P_V;// Move left 
end 
ball b1(clk, rst, x, y, key, game_stop, 1'b1, b1_x_l, b1_x_r, b1_y_t, b1_y_b);
ball #(.X_D(-1)) b2(clk, rst, x, y, key, game_stop, 1'b1, b2_x_l, b2_x_r, b2_y_t, b2_y_b);
ball #(.Y_D(-1)) b3(clk, rst, x, y, key, game_stop, 1'b1, b3_x_l, b3_x_r, b3_y_t, b3_y_b);
ball #(.X_D(-1),.Y_D(-1)) b4(clk, rst, x, y, key, game_stop, 1'b1, b4_x_l, b4_x_r, b4_y_t, b4_y_b);
ball #(.HALF_X(0),.HALF_Y(0)) b5(clk, rst, x, y, key, game_stop, en, b5_x_l, b5_x_r, b5_y_t, b5_y_b);
ball #(.HALF_X(0),.HALF_Y(460),.Y_D(-1)) b6(clk, rst, x, y, key, game_stop, en, b6_x_l, b6_x_r, b6_y_t, b6_y_b);
ball #(.HALF_X(620),.HALF_Y(0),.X_D(-1)) b7(clk, rst, x, y, key, game_stop, en2, b7_x_l, b7_x_r, b7_y_t, b7_y_b);
ball #(.HALF_X(620),.HALF_Y(460),.X_D(-1),.Y_D(-1)) b8(clk, rst, x, y, key, game_stop, en2, b8_x_l, b8_x_r, b8_y_t, b8_y_b);

boss b(clk, rst, x, y, key, p_x_l, p_x_r, p_y_t, p_y_b, game_stop, en3, b_x_l, b_x_r, b_y_t, b_y_b);

assign b1_on = (x>=b1_x_l && x<=b1_x_r && y>=b1_y_t && y<=b1_y_b)? 1 : 0; //b1이 있는 영역
assign b2_on = (x>=b2_x_l && x<=b2_x_r && y>=b2_y_t && y<=b2_y_b)? 1 : 0; //b2이 있는 영역
assign b3_on = (x>=b3_x_l && x<=b3_x_r && y>=b3_y_t && y<=b3_y_b)? 1 : 0; //b3이 있는 영역
assign b4_on = (x>=b4_x_l && x<=b4_x_r && y>=b4_y_t && y<=b4_y_b)? 1 : 0; //b4이 있는 영역
assign b5_on = (x>=b5_x_l && x<=b5_x_r && y>=b5_y_t && y<=b5_y_b)? 1 : 0; //b5이 있는 영역
assign b6_on = (x>=b6_x_l && x<=b6_x_r && y>=b6_y_t && y<=b6_y_b)? 1 : 0; //b6이 있는 영역
assign b7_on = (x>=b7_x_l && x<=b7_x_r && y>=b7_y_t && y<=b7_y_b)? 1 : 0; //b7이 있는 영역
assign b8_on = (x>=b8_x_l && x<=b8_x_r && y>=b8_y_t && y<=b8_y_b)? 1 : 0; //b8이 있는 영역
assign b_on = (x>=b_x_l && x<=b_x_r && y>=b_y_t && y<=b_y_b)? 1 : 0; //boss이 있는 영역

assign b1_x_touch = ((b1_x_l>=p_x_l - BALL_SIZE + 1) && b1_x_l<p_x_r)? 1 : 0;// ball_x 가 player에 닿으면
assign b1_y_touch = ((b1_y_t>=p_y_t - BALL_SIZE - 1) && b1_y_t<p_y_b)? 1 : 0;// ball_y 가 player에 닿으면 
assign b2_x_touch = ((b2_x_l>=p_x_l - BALL_SIZE + 1) && b2_x_l<p_x_r)? 1 : 0;// ball_x 가 player에 닿으면
assign b2_y_touch = ((b2_y_t>=p_y_t - BALL_SIZE - 1) && b2_y_t<p_y_b)? 1 : 0;// ball_y 가 player에 닿으면 
assign b3_x_touch = ((b3_x_l>=p_x_l - BALL_SIZE + 1) && b3_x_l<p_x_r)? 1 : 0;// ball_x 가 player에 닿으면
assign b3_y_touch = ((b3_y_t>=p_y_t - BALL_SIZE - 1) && b3_y_t<p_y_b)? 1 : 0;// ball_y 가 player에 닿으면 
assign b4_x_touch = ((b4_x_l>=p_x_l - BALL_SIZE + 1) && b4_x_l<p_x_r)? 1 : 0;// ball_x 가 player에 닿으면
assign b4_y_touch = ((b4_y_t>=p_y_t - BALL_SIZE - 1) && b4_y_t<p_y_b)? 1 : 0;// ball_y 가 player에 닿으면 
assign b5_x_touch = ((b5_x_l>=p_x_l - BALL_SIZE + 1) && b5_x_l<p_x_r)? 1 : 0;// ball_x 가 player에 닿으면
assign b5_y_touch = ((b5_y_t>=p_y_t - BALL_SIZE - 1) && b5_y_t<p_y_b)? 1 : 0;// ball_y 가 player에 닿으면 
assign b6_x_touch = ((b6_x_l>=p_x_l - BALL_SIZE + 1) && b6_x_l<p_x_r)? 1 : 0;// ball_x 가 player에 닿으면
assign b6_y_touch = ((b6_y_t>=p_y_t - BALL_SIZE - 1) && b6_y_t<p_y_b)? 1 : 0;// ball_y 가 player에 닿으면 
assign b7_x_touch = ((b7_x_l>=p_x_l - BALL_SIZE + 1) && b7_x_l<p_x_r)? 1 : 0;// ball_x 가 player에 닿으면
assign b7_y_touch = ((b7_y_t>=p_y_t - BALL_SIZE - 1) && b7_y_t<p_y_b)? 1 : 0;// ball_y 가 player에 닿으면 
assign b8_x_touch = ((b8_x_l>=p_x_l - BALL_SIZE + 1) && b8_x_l<p_x_r)? 1 : 0;// ball_x 가 player에 닿으면
assign b8_y_touch = ((b8_y_t>=p_y_t - BALL_SIZE - 1) && b8_y_t<p_y_b)? 1 : 0;// ball_y 가 player에 닿으면 
assign b_x_touch = ((b_x_l>=p_x_l - BALL_SIZE + 1) && b_x_l<p_x_r)? 1 : 0;// ball_x 가 player에 닿으면
assign b_y_touch = ((b_y_t>=p_y_t - BALL_SIZE - 1) && b_y_t<p_y_b)? 1 : 0;// ball_y 가 player에 닿으면 



assign touch_ball  = ((b1_x_touch == 1 && b1_y_touch == 1) || (b2_x_touch == 1 && b2_y_touch == 1) || (b3_x_touch == 1 && b3_y_touch == 1) || (b4_x_touch == 1 && b4_y_touch == 1)|| (b5_x_touch == 1 && b5_y_touch == 1)|| (b6_x_touch == 1 && b6_y_touch == 1)|| (b7_x_touch == 1 && b7_y_touch == 1)|| (b8_x_touch == 1 && b8_y_touch == 1)|| (b_x_touch == 1 && b_y_touch == 1))? 1 : 0;  //ball이 player에 닿으면 


reg d_inc, d_clr;
wire miss;
assign miss = (touch_ball==1 && refr_tick==1)? 1 : 0; //play에 ball이 닿음  1클럭 pulse로 만들기 위해 refr_tick과 AND 시킴

/*---------------------------------------------------------*/
// 시간 측정을 위한 카운터 
/*---------------------------------------------------------*/
wire clk_1hz;
wire [5:0] count; 
wire level1,level2,level3;
clk_divider clk_div_inst (clk, clk_1hz);
counter(clk_1hz, rst,1'b1, game_stop, count);


reg en_reg;
reg en_reg2;
reg en_reg3;


always @(*) begin
    en_reg = 1'b0;
    if(count >= 10 && count <= 60) en_reg = 1'b1;
    else  en_reg = 1'b0; 
 end
 
always @(*) begin
     en_reg2 = 1'b0;
     if(count >= 25 && count <= 60) en_reg2 = 1'b1;
     else  en_reg2 = 1'b0; 
  end
always @(*) begin
       en_reg3 = 1'b0;
       if(count >= 40 && count <= 60) en_reg3 = 1'b1;
       else  en_reg3 = 1'b0; 
    end

always @ (posedge clk or posedge rst) begin
    if(rst | game_stop) begin
        en  <= 1'b0; 
        en2 <= 1'b0;
        en3 <= 1'b0;
    end else begin
        en  <= en_reg; 
        en2 <= en_reg2;
        en3 <= en_reg3;
    end
end





/*---------------------------------------------------------*/
// finite state machine for game control
/*---------------------------------------------------------*/
parameter NEWGAME=2'b00, PLAY=2'b01, NEWBALL=2'b10, OVER=2'b11; 
reg [1:0] state_reg, state_next;
reg [1:0] life_reg, life_next;

always @ (posedge clk or posedge rst) begin
    if(rst) begin
        state_reg <= NEWGAME; 
        life_reg <= 0;
    end else begin
        state_reg <= state_next; 
        life_reg <= life_next;
    end
end

always @ (key, miss, state_reg, life_reg) begin
    game_stop = 1; 
    d_clr = 0;
    d_inc = 0;
    life_next = life_reg;
    game_over = 0;


    case(state_reg) 
        NEWGAME: begin //새 게임
            d_clr = 1; //스코어 0으로 초기화
            if(key[4] == 1) begin //버튼이 눌리면
                state_next = PLAY; //게임시작
                life_next = 2'b10; //남은 생명 2개로
            end else begin
                state_next = NEWGAME; //버튼이 안 눌리면 현재 상태 유지
                life_next = 2'b11; //남은 생명 3개 유지
            end
         end
         PLAY: begin
            game_stop = 0; //게임 Running

            if (miss) begin //ball을 놓치면
                if (life_reg==2'b00) //남은 생명이 없으면
                    state_next = OVER; //게임종료
                else begin//남은 생명이 있으면 
                    state_next = NEWBALL; 
                    life_next = life_reg-1'b1; //남은 생명 하나 줄임
                end
            end else
                state_next = PLAY; //ball 놓치지 않으면 계속 진행
        end
        NEWBALL: //새 ball 준비
            if(key[4] == 1) state_next = PLAY;
            else state_next = NEWBALL; 
        OVER: begin
            if(key[4] == 1) begin //게임이 끝났을 때 버튼을 누르면 새게임 시작
                state_next = NEWGAME;
            end else begin
                state_next = OVER;
            end
            game_over = 1;
        end 
        default: 
            state_next = NEWGAME;
    endcase
end

/*---------------------------------------------------------*/
// text on screen 
/*---------------------------------------------------------*/
// score region
wire [6:0] char_addr;
reg [6:0] char_addr_s, char_addr_l, char_addr_o;
wire [2:0] bit_addr;
reg [2:0] bit_addr_s, bit_addr_l, bit_addr_o;
wire [3:0] row_addr, row_addr_s, row_addr_l, row_addr_o; 
wire score_on, life_on, over_on;

wire font_bit;
wire [7:0] font_word;
wire [10:0] rom_addr;

font_rom_vhd font_rom_inst (clk, rom_addr, font_word);

assign rom_addr = {char_addr, row_addr};
assign font_bit = font_word[~bit_addr]; //화면 x좌표는 왼쪽이 작은데, rom의 bit는 오른쪽이 작으므로 reverse

assign char_addr = (score_on)? char_addr_s : (life_on)? char_addr_l : (over_on)? char_addr_o : 0;
assign row_addr = (score_on)? row_addr_s : (life_on)? row_addr_l : (over_on)? row_addr_o : 0; 
assign bit_addr = (score_on)? bit_addr_s : (life_on)? bit_addr_l : (over_on)? bit_addr_o : 0; 


//remaining ball
wire [9:0] life_x_l, life_y_t; 
assign life_x_l = 200; 
assign life_y_t = 0; 
assign life_on = (y>=life_y_t && y<life_y_t+16 && x>=life_x_l && x<life_x_l+8*3)? 1 : 0;
assign row_addr_l = y-life_y_t;
always @(*) begin
    if (x>=life_x_l+8*0 && x<life_x_l+8*1) begin bit_addr_l = (x-life_x_l-8*0); char_addr_l = 7'b1000010; end // B x42  
    else if (x>=life_x_l+8*1 && x<life_x_l+8*2) begin bit_addr_l = (x-life_x_l-8*1); char_addr_l = 7'b0111010; end // :
    else if (x>=life_x_l+8*2 && x<life_x_l+8*3) begin bit_addr_l = (x-life_x_l-8*2); char_addr_l = {5'b01100, life_reg}; end
    else begin bit_addr_l = 0; char_addr_l = 0; end   
end

// game over
assign over_on = (game_over==1 && y[9:6]==3 && x[9:5]>=5 && x[9:5]<=13)? 1 : 0; 
assign row_addr_o = y[5:2];
always @(*) begin
    bit_addr_o = x[4:2];
    case (x[9:5]) 
        5: char_addr_o = 7'b1000111; // G x47
        6: char_addr_o = 7'b1100001; // a x61
        7: char_addr_o = 7'b1101101; // m x6d
        8: char_addr_o = 7'b1100101; // e x65
        9: char_addr_o = 7'b0000000; //                      
        10: char_addr_o = 7'b1001111; // O x4f
        11: char_addr_o = 7'b1110110; // v x76
        12: char_addr_o = 7'b1100101; // e x65
        13: char_addr_o = 7'b1110010; // r x72
        default: char_addr_o = 0; 
    endcase
end
// (~en & b5_on) ? : 3'b110:
// en & b5_on ? : 3'b001

/*---------------------------------------------------------*/
// color setting
/*---------------------------------------------------------*/
assign rgb = (font_bit & score_on)? 3'b001 : 
             (font_bit & life_on)? 3'b001 : 
             (font_bit & over_on)? 3'b001 : 
             (p_on)?  3'b001 : 
             (b1_on)? 3'b010 : 
             (b2_on)? 3'b010 : 
             (b3_on)? 3'b010 : 
             (b4_on)? 3'b010 : 
             (~en & b5_on) ? 3'b111 : 
             (en & b5_on)  ? 3'b001 : 
             (~en & b6_on) ? 3'b111 : 
             (en & b6_on)  ? 3'b001 : 
             (~en2 & b7_on) ? 3'b111 : 
             (en2 & b7_on)  ? 3'b100 : 
             (~en2 & b8_on) ? 3'b111 : 
             (en2 & b8_on)  ? 3'b100 :             
             (~en3 & b_on) ? 3'b111 : 
             (en3 & b_on)  ? 3'b000 :   
             3'b111;

endmodule
